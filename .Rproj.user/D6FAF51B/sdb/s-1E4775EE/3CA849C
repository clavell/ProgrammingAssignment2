{
    "collab_server" : "",
    "contents" : "## These functions will take a matrix and store it and its inverse\n## in a different environment i.e. cache them\n\n## This function creates a list of functions that can access the cached matrix\n##and its inverse\nmakeCacheMatrix <- function(x = matrix()) {\n        inverse <- NULL\n        \n        set <- function(y) {\n                x<<-y\n                inverse <<- NULL\n        }        \n        get <- function(){\n                x\n        }\n        \n        setinverse <- function(i){\n              inverse <<- i\n        }\n        \n        getinverse <- function(){\n                inverse\n        }\n        list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)\n}\n\n\n## This function computes the inverse and caches it if the inverse hasn't\n## already been computed. Else it returns already computed inverse\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n        if(is.null(x$getinverse())){\n                inv<-solve(x$get())\n                inverse<<-x$setinverse(inv)\n                return(inverse)\n        }\n        print(\"inverse already computed\")\n        inverse\n}\n\n",
    "created" : 1485384056783.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2672962657",
    "id" : "3CA849C",
    "lastKnownWriteTime" : 1485390730,
    "last_content_update" : 1485390730803,
    "path" : "~/Desktop/coursera/r programming/assignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}